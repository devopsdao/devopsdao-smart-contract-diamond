// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import { LibDiamond } from "../libraries/LibDiamond.sol";
import "./interchain/AxelarFacet.sol";
import "./interchain/HyperlaneFacet.sol";
import "./interchain/LayerzeroFacet.sol";
import "./interchain/WormholeFacet.sol";

contract TasksInterchainFacet {

    function createTaskContract(
        string memory interchainName,
        address _sender,
        string memory _nanoId,
        string memory _taskType,
        string memory _title,
        string memory _description,
        string memory _symbol,
        uint256 _amount
    ) external payable {
        if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_AXELAR))){
            AxelarFacet(address(this)).createTaskContract(_sender, _nanoId, _taskType, _title, _description, _symbol, _amount);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_HYPERLANE))){
            HyperlaneFacet(address(this)).createTaskContract(_sender, _nanoId, _taskType, _title, _description, _symbol, _amount);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_LAYERZERO))){
            LayerzeroFacet(address(this)).createTaskContract(_sender, _nanoId, _taskType, _title, _description, _symbol, _amount);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_WORMHOLE))){
            WormholeFacet(address(this)).createTaskContract(_sender, _nanoId, _taskType, _title, _description, _symbol, _amount);
        }
        else revert('not valid interchain name');
    }

    function taskParticipate(
        string memory interchainName,
        address _sender,
        address _contractAddress,
        string memory _message,
        uint256 _replyTo
    ) external payable {
        bytes memory funcPayload = abi.encode(
            _sender,
            _contractAddress,
            _message,
            _replyTo
        );
        if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_AXELAR))){
            AxelarFacet(address(this)).taskParticipate(_sender, _contractAddress, _message, _replyTo);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_HYPERLANE))){
            HyperlaneFacet(address(this)).taskParticipate(_sender, _contractAddress, _message, _replyTo);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_LAYERZERO))){
            LayerzeroFacet(address(this)).taskParticipate(_sender, _contractAddress, _message, _replyTo);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_WORMHOLE))){
            WormholeFacet(address(this)).taskParticipate(_sender, _contractAddress, _message, _replyTo);
        }
        else revert('not valid interchain name');
    }

    function taskAuditParticipate(
        string memory interchainName,
        address _sender,
        address _contractAddress,
        string memory _message,
        uint256 _replyTo
    ) external payable {
        bytes memory funcPayload = abi.encode(
            _sender,
            _contractAddress,
            _message,
            _replyTo
        );
        if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_AXELAR))){
            AxelarFacet(address(this)).taskAuditParticipate(_sender, _contractAddress, _message, _replyTo);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_HYPERLANE))){
            HyperlaneFacet(address(this)).taskAuditParticipate(_sender, _contractAddress, _message, _replyTo);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_LAYERZERO))){
            LayerzeroFacet(address(this)).taskAuditParticipate(_sender, _contractAddress, _message, _replyTo);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_WORMHOLE))){
            WormholeFacet(address(this)).taskAuditParticipate(_sender, _contractAddress, _message, _replyTo);
        }
        else revert('not valid interchain name');
    }

    function taskStateChange(
        string memory interchainName,
        address _sender,
        address _contractAddress,
        address payable _participant,
        string memory _state,
        string memory _message,
        uint256 _replyTo,
        uint256 _rating
    ) external payable {
        bytes memory funcPayload = abi.encode(
            _sender,
            _contractAddress,
            _participant,
            _state,
            _message,
            _replyTo,
            _rating
        );
        if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_AXELAR))){
            AxelarFacet(address(this)).taskStateChange(_sender, _contractAddress, _participant, _state, _message, _replyTo, _rating);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_HYPERLANE))){
            HyperlaneFacet(address(this)).taskStateChange(_sender, _contractAddress, _participant, _state, _message, _replyTo, _rating);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_LAYERZERO))){
            LayerzeroFacet(address(this)).taskStateChange(_sender, _contractAddress, _participant, _state, _message, _replyTo, _rating);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_WORMHOLE))){
            WormholeFacet(address(this)).taskStateChange(_sender, _contractAddress, _participant, _state, _message, _replyTo, _rating);
        }
        else revert('not valid interchain name');
    }

    function taskAuditDecision(
        string memory interchainName,
        address _sender,
        address _contractAddress,
        string memory _favour,
        string memory _message,
        uint256 _replyTo,
        uint256 _rating
    ) external payable {
        bytes memory funcPayload = abi.encode(
            _sender,
            _contractAddress,
            _favour,
            _message,
            _replyTo,
            _rating
        );
        if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_AXELAR))){
            AxelarFacet(address(this)).taskAuditDecision(_sender, _contractAddress, _favour, _message, _replyTo, _rating);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_HYPERLANE))){
            HyperlaneFacet(address(this)).taskAuditDecision(_sender, _contractAddress, _favour, _message, _replyTo, _rating);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_LAYERZERO))){
            LayerzeroFacet(address(this)).taskAuditDecision(_sender, _contractAddress, _favour, _message, _replyTo, _rating);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_WORMHOLE))){
            WormholeFacet(address(this)).taskAuditDecision(_sender, _contractAddress, _favour, _message, _replyTo, _rating);
        }
        else revert('not valid interchain name');
    }

    function sendMessage(
        string memory interchainName,
        address _sender,
        address _contractAddress,
        string memory _message,
        uint256 _replyTo
    ) external payable {
        bytes memory funcPayload = abi.encode(
            _sender,
            _contractAddress,
            _message,
            _replyTo
        );
        if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_AXELAR))){
            AxelarFacet(address(this)).sendMessage(_sender, _contractAddress, _message, _replyTo);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_HYPERLANE))){
            HyperlaneFacet(address(this)).sendMessage(_sender, _contractAddress, _message, _replyTo);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_LAYERZERO))){
            LayerzeroFacet(address(this)).sendMessage(_sender, _contractAddress, _message, _replyTo);
        }
        else if(keccak256(bytes(interchainName)) == keccak256(bytes(IC_WORMHOLE))){
            WormholeFacet(address(this)).sendMessage(_sender, _contractAddress, _message, _replyTo);
        }
        else revert('not valid interchain name');
    }

}